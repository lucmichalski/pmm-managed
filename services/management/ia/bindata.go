// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/iatemplates/mysql_down.yml (419B)
// data/iatemplates/mysql_restarted.yml (612B)
// data/iatemplates/mysql_too_many_connections.yml (783B)

package ia

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIatemplatesMysql_downYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x50\xb1\x4e\xec\x40\x0c\xec\xf3\x15\x53\xbc\x22\x91\x5e\x4e\x50\xd0\xac\x74\x05\x08\xba\x00\x42\x57\x50\x9e\x9c\xc4\x48\x2b\x25\xbb\xc1\xbb\x09\xac\x8e\xfc\x3b\x3a\xe7\x2e\x9c\xa8\xe8\x3c\xb6\x67\x3c\xe3\xb2\x2c\x33\x19\x3b\x0e\x26\x03\x4a\x38\xea\xd9\xa0\x4f\xe1\xbd\xdb\xb7\xfe\xc3\x65\x00\x30\xb1\x04\xeb\x9d\xc1\xb5\xc2\x30\xf6\x3d\x49\x32\x78\x4c\xbb\x97\x0a\xf7\xcf\xaf\x4f\xda\xe7\xcf\x41\x0c\xbe\x4a\x05\xba\x86\x3a\x21\x0f\x2c\x93\x6d\x78\x7f\x94\xfe\x0f\xe7\xdb\x73\x79\x1e\xc4\x34\x70\x81\x7c\x39\x3a\x0e\x05\xb6\x5b\x5c\xa9\xc8\x40\x42\xbd\x3a\x03\xde\xbc\x18\xdc\x84\xc5\x01\x4f\x2c\x36\x26\x83\x46\x6c\xb4\x0d\x75\xda\xee\xa8\xe6\xee\xb4\x7e\x24\x78\x83\x9a\x44\x21\x39\xe7\x23\x45\xeb\xdd\x3a\x6f\x39\x34\x62\x87\xa8\xc9\x56\xd7\x38\xa5\xb2\x2e\x44\x72\x0d\xe3\x70\xc0\xbf\x45\x78\x73\x99\x04\xf3\x0c\x1b\x34\xfc\x66\xa5\x56\xb7\x77\x0f\xd5\xce\x5c\x70\x30\xcf\x3f\xef\xf8\xfd\x35\xe4\x7f\xb8\x52\x64\xdf\x01\x00\x00\xff\xff\x40\xa0\x4f\x33\xa3\x01\x00\x00")

func dataIatemplatesMysql_downYmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIatemplatesMysql_downYml,
		"data/iatemplates/mysql_down.yml",
	)
}

func dataIatemplatesMysql_downYml() (*asset, error) {
	bytes, err := dataIatemplatesMysql_downYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/iatemplates/mysql_down.yml", size: 419, mode: os.FileMode(0664), modTime: time.Unix(1606923688, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1e, 0xdb, 0x35, 0xa5, 0xc6, 0xde, 0x13, 0xa4, 0x1b, 0x12, 0x65, 0x5f, 0xb0, 0x3c, 0x75, 0xc5, 0x1b, 0xb6, 0xf, 0xe3, 0x6c, 0xbd, 0x4d, 0xc9, 0xfd, 0x8d, 0x67, 0xf2, 0xb5, 0x85, 0x33, 0x80}}
	return a, nil
}

var _dataIatemplatesMysql_restartedYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x31\x8f\xd3\x40\x10\x85\x7b\xff\x8a\xa7\x13\x05\x48\x38\xf2\x09\x44\xb1\xa2\x01\x89\x2e\x14\x90\x32\x8a\xac\x89\x3d\x76\x56\x5a\xef\x9a\x99\xb5\x0f\xeb\xf0\x7f\x47\xd9\x98\xe5\x42\x85\xbb\x79\xf3\xf4\xfc\xe6\xdb\xb2\x2c\x0b\x99\x1c\xab\x29\x80\x12\x9e\x06\x36\x18\x16\xfd\xe1\x6a\x61\x8d\x24\x91\xdb\x02\x00\x66\x16\xb5\xc1\x1b\x3c\xa6\x51\xa7\x61\x20\x59\x0c\xbe\x2e\x87\x6f\x7b\x7c\xbf\xf3\xf2\xcf\x51\x0c\x7e\x95\x69\xc0\x16\xd7\xbb\x70\x26\x57\x6b\xa4\x38\x69\x3d\x8d\xd1\x0e\xbc\x19\x3e\xe2\x78\xc4\x2e\x5e\x84\xf5\x12\x5c\x8b\xd3\x29\x2d\x46\x12\x1a\x52\xb1\xeb\xf7\xa7\x5c\xb6\x6d\xfa\x8b\x2e\x07\x6e\x82\x6f\x15\x9d\x84\x01\xf1\xc2\x70\xa4\x11\xdb\x1d\xd9\x3e\x79\x1b\x0d\x1e\x94\x9b\x87\xac\xc5\x65\x64\x83\xce\x05\xfa\xeb\x13\xf2\x3d\x1b\x1c\xab\xb7\x78\x5f\x55\xa7\xac\xcf\xe4\x26\x36\x78\xf7\xa1\x4a\x52\x17\xc4\xe0\xb1\xd2\x1b\x16\x9e\x59\x6c\x5c\x0c\x9e\x48\xbc\xf5\x7d\x52\x1d\x9d\xd9\xe5\x43\xba\x10\x0c\xce\x24\x69\x24\xef\x43\xa4\x68\x83\xcf\xfb\x96\xb5\x11\x3b\xc6\x44\x3b\x43\xc4\x46\xda\x7a\x8d\xe4\x1b\xc6\xf3\x33\x5e\xdd\x82\x77\xca\x32\xdb\x86\xeb\x2b\x20\xac\x2b\x9e\x48\x91\x5f\x2f\x19\x53\xe7\xeb\x4a\x37\x44\xd4\x87\x5d\x4e\xde\x7f\xfa\xfc\x65\x7f\x30\x2f\x22\xb1\xae\xc5\x3f\x70\x6f\xbf\xbf\x8f\x7e\xfd\x1f\x6d\xde\x14\xbf\x03\x00\x00\xff\xff\xa9\x09\x19\xe6\x64\x02\x00\x00")

func dataIatemplatesMysql_restartedYmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIatemplatesMysql_restartedYml,
		"data/iatemplates/mysql_restarted.yml",
	)
}

func dataIatemplatesMysql_restartedYml() (*asset, error) {
	bytes, err := dataIatemplatesMysql_restartedYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/iatemplates/mysql_restarted.yml", size: 612, mode: os.FileMode(0664), modTime: time.Unix(1607069561, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6, 0xd, 0xb1, 0x2a, 0x9d, 0x10, 0x58, 0xd1, 0x5e, 0x78, 0x92, 0x12, 0xda, 0x4, 0xd9, 0xbe, 0x70, 0x2, 0x98, 0x94, 0x90, 0xec, 0x9e, 0x5d, 0x1, 0x6c, 0x7a, 0xff, 0x96, 0xcb, 0x9c, 0x91}}
	return a, nil
}

var _dataIatemplatesMysql_too_many_connectionsYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x4d\x6b\xdb\x4c\x10\xbe\xfb\x57\x3c\x84\x37\x60\xbf\xd4\xa9\x73\x08\x94\x85\x16\x5c\xc8\xcd\x39\x94\xd0\x5e\x8c\x11\x63\x79\x24\x6f\xd1\xce\xb8\xb3\x2b\x35\x22\xcd\x7f\x2f\x5a\xdb\xaa\x9b\x96\xea\xa4\xf9\xd8\x79\x3e\x66\xe6\xf3\xf9\xc4\xda\x86\xa3\x9b\x00\x73\x08\x05\x76\x08\x7d\xfc\xd6\x14\x49\xb5\x08\x24\x7d\x51\xaa\x08\x97\xc9\xab\xc4\x09\x00\x74\x6c\xd1\xab\x38\xdc\xe6\x30\xb6\x21\x90\xf5\x0e\x0f\xfd\xe3\xa7\x15\x2e\xba\xe1\x05\x6d\xe4\xdc\xc5\x4f\x07\x73\xf8\x31\xcf\x01\x10\xe8\xa9\xd0\x8e\xad\x48\x3e\xf0\xf4\x08\x58\x37\xba\xa5\xa6\x88\x89\x52\x1b\x8b\xb4\x37\xa6\x5d\x3c\xa3\xf3\x6e\x7d\x17\x36\x33\xbc\x85\xaf\x45\xcd\x4b\x8d\xe9\x57\xdd\xce\xce\xf3\x2e\x27\x74\x64\x9e\xb6\x0d\xc7\x62\x80\x79\x4d\x1f\xf8\x1f\xb7\x8b\xc5\xe9\xff\x03\xd6\x6b\xdc\x0c\x60\x71\xaf\xcd\x0e\x9b\x4d\x2e\x1c\xc8\x28\x64\x53\x86\xef\x6c\xcc\xd8\x76\xca\x5f\x88\x5f\xe2\xc0\x56\xb2\x24\xaa\x19\x95\x69\x18\x8c\xa8\x7c\xdd\x1a\xef\x06\xb5\x3e\xb4\x61\x7c\xd5\x8a\x4f\x0e\x57\xd7\x57\x63\x26\xf5\x07\x76\xa8\x1a\xa5\x34\xe6\x8c\xa4\x66\x87\xf5\xe2\xcd\xc0\x77\x33\xe6\x3b\x6a\x5a\x76\x78\x77\x94\x50\xa9\x39\xdc\x1d\x67\x47\xee\xd8\x7c\xea\x1d\xbe\x93\x89\x97\x3a\x67\x1b\xda\x72\x33\x6a\xa9\x54\x1d\xb6\x64\x39\x24\x11\x4d\x94\xbd\x39\xd7\x77\x1c\x4b\xf3\x87\x94\x37\x3c\xee\x0b\x78\x50\x63\xa4\x3d\xc9\x1f\x86\x5d\x43\xab\xbf\x2c\x9f\x8c\x4f\x07\x00\x15\x3c\x3f\xe3\xbf\x23\x91\x9b\xc8\xd6\xf9\x92\x8b\xc1\x53\xbc\xbc\x8c\x08\x5f\x96\xab\xcf\xf7\x78\x9f\x5b\xb3\xc6\xcb\xe2\x6a\xf9\xf1\x7e\xf5\xe8\x2e\xe6\xfc\xaa\xbe\xba\xc0\xa4\x8a\xe1\x70\x7f\x63\x33\xf5\x12\x13\x49\xc9\xff\x60\x32\x9b\xfc\x0c\x00\x00\xff\xff\x8c\x50\xa4\x09\x0f\x03\x00\x00")

func dataIatemplatesMysql_too_many_connectionsYmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIatemplatesMysql_too_many_connectionsYml,
		"data/iatemplates/mysql_too_many_connections.yml",
	)
}

func dataIatemplatesMysql_too_many_connectionsYml() (*asset, error) {
	bytes, err := dataIatemplatesMysql_too_many_connectionsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/iatemplates/mysql_too_many_connections.yml", size: 783, mode: os.FileMode(0664), modTime: time.Unix(1606923688, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x35, 0x25, 0x42, 0x3, 0x4c, 0xf8, 0x15, 0x12, 0x98, 0x27, 0x18, 0xc3, 0xd1, 0x3f, 0x62, 0x5b, 0x60, 0xc0, 0xd2, 0xa7, 0xe1, 0x41, 0x17, 0xef, 0xde, 0xbc, 0xbf, 0x9b, 0x94, 0x44, 0x1e, 0xb4}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/iatemplates/mysql_down.yml":                 dataIatemplatesMysql_downYml,
	"data/iatemplates/mysql_restarted.yml":            dataIatemplatesMysql_restartedYml,
	"data/iatemplates/mysql_too_many_connections.yml": dataIatemplatesMysql_too_many_connectionsYml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": {nil, map[string]*bintree{
		"iatemplates": {nil, map[string]*bintree{
			"mysql_down.yml":                 {dataIatemplatesMysql_downYml, map[string]*bintree{}},
			"mysql_restarted.yml":            {dataIatemplatesMysql_restartedYml, map[string]*bintree{}},
			"mysql_too_many_connections.yml": {dataIatemplatesMysql_too_many_connectionsYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
